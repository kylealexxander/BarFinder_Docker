diff --git a/data/create_csv.py b/data/create_csv.py
index 6c49ccd..49e274c 100644
--- a/data/create_csv.py
+++ b/data/create_csv.py
@@ -9,16 +9,16 @@ from random import shuffle
 
 LABELS = {
     "english": 0,
-    "german": 1,
-    "french": 2,
-    "spanish": 3,
-    "chinese": 4,
-    "russian": 5,
+    # "german": 1,
+    # "french": 2,
+    # "spanish": 3,
+    "chinese": 1,  # 4,
+    # "russian": 5,
 }
 
 
 def recursive_glob(path, pattern):
-    for root, dirs, files in os.walk(path):
+    for root, dirs, files in os.walk(path, followlinks=True):
         for basename in files:
             if fnmatch.fnmatch(basename, pattern):
                 filename = os.path.abspath(os.path.join(root, basename))
@@ -42,7 +42,8 @@ def create_csv(root_dir, train_validation_split=0.8):
         files.extend(recursive_glob(os.path.join(root_dir, lang), "*.png"))
         num_files = len(files)
 
-        file_names[lang] = files
+        shuffle(files)
+        file_names[lang] = files
         counter[lang] = num_files
 
     # Calculate train / validation split
diff --git a/data/wav_to_spectrogram.py b/data/wav_to_spectrogram.py
index fe882f4..29600cd 100644
--- a/data/wav_to_spectrogram.py
+++ b/data/wav_to_spectrogram.py
@@ -27,11 +27,12 @@ def directory_to_spectrograms(args):
     # Each generator will scan a directory for audio files and convert them to spectrogram images
     # adjust this if you have other languages or any language is missing
     languages = ["english",
-                 "german",
-                 "french",
-                 "spanish",
+                 # "german",
+                 # "french",
+                 # "spanish",
                  "chinese",
-                 "russian"]
+                 # "russian"
+                 ]
 
     generators = [SpectrogramGenerator(os.path.join(source, language), config, shuffle=False, run_only_once=True) for language in languages]
     generator_queues = [SpectrogramGen.get_generator() for SpectrogramGen in generators]
diff --git a/keras/data_loaders/DirectoryLoader.py b/keras/data_loaders/DirectoryLoader.py
index 9e5c8e1..23eb647 100644
--- a/keras/data_loaders/DirectoryLoader.py
+++ b/keras/data_loaders/DirectoryLoader.py
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import os
 import random
 import numpy as np
@@ -5,7 +6,7 @@ from itertools import cycle
 from keras.utils.np_utils import to_categorical
 from keras.engine.training import generator_queue
 
-from SpectrogramGenerator import SpectrogramGenerator
+from .SpectrogramGenerator import SpectrogramGenerator
 
 class DirectoryLoader(object):
 
@@ -73,7 +74,7 @@ if __name__ == "__main__":
 
     import scipy.misc
     a = DirectoryLoader("/Users/therold/Downloads/Speech Data/EU Speech", {"pixel_per_second": 50, "input_shape": [129, 100, 1], "batch_size": 32, "num_classes": 4}, shuffle=True)
-    print a.get_num_files()
+    print(a.get_num_files())
 
 
 
@@ -83,4 +84,4 @@ if __name__ == "__main__":
         i = 0
         for image in np.vsplit(data, 32):
             scipy.misc.imsave("/Users/therold/Downloads/Speech Data/EU Speech/png/%s.png" % i, np.squeeze(image) * 255.)
-            i += 1
\ No newline at end of file
+            i += 1
diff --git a/keras/data_loaders/MusicBackgroundSpectrogramGenerator.py b/keras/data_loaders/MusicBackgroundSpectrogramGenerator.py
index eca5235..c5f2981 100644
--- a/keras/data_loaders/MusicBackgroundSpectrogramGenerator.py
+++ b/keras/data_loaders/MusicBackgroundSpectrogramGenerator.py
@@ -17,7 +17,7 @@ else:
     from Queue import Queue
 
 def recursive_glob(path, pattern):
-    for root, dirs, files in os.walk(path):
+    for root, dirs, files in os.walk(path, followlinks=True):
         for basename in files:
             if fnmatch.fnmatch(basename, pattern):
                 filename = os.path.abspath(os.path.join(root, basename))
@@ -133,4 +133,4 @@ if __name__ == "__main__":
 
 
     for a in gen:
-        pass
\ No newline at end of file
+        pass
diff --git a/keras/data_loaders/NoisyBackgroundSpectrogramGenerator.py b/keras/data_loaders/NoisyBackgroundSpectrogramGenerator.py
index 4101a9d..07b8b13 100644
--- a/keras/data_loaders/NoisyBackgroundSpectrogramGenerator.py
+++ b/keras/data_loaders/NoisyBackgroundSpectrogramGenerator.py
@@ -12,7 +12,7 @@ else:
     from Queue import Queue
 
 def recursive_glob(path, pattern):
-    for root, dirs, files in os.walk(path):
+    for root, dirs, files in os.walk(path, followlinks=True):
         for basename in files:
             if fnmatch.fnmatch(basename, pattern):
                 filename = os.path.abspath(os.path.join(root, basename))
@@ -141,4 +141,4 @@ if __name__ == "__main__":
 
 
     for a in gen:
-        pass
\ No newline at end of file
+        pass
diff --git a/keras/data_loaders/SpectrogramGenerator.py b/keras/data_loaders/SpectrogramGenerator.py
index d0d0033..c6505a9 100644
--- a/keras/data_loaders/SpectrogramGenerator.py
+++ b/keras/data_loaders/SpectrogramGenerator.py
@@ -1,5 +1,6 @@
 import os
 import random
+import uuid
 import numpy as np
 from PIL import Image
 import fnmatch
@@ -12,7 +13,7 @@ else:
     from Queue import Queue
 
 def recursive_glob(path, pattern):
-    for root, dirs, files in os.walk(path):
+    for root, dirs, files in os.walk(path, followlinks=True):
         for basename in files:
             if fnmatch.fnmatch(basename, pattern):
                 filename = os.path.abspath(os.path.join(root, basename))
@@ -53,9 +54,15 @@ class SpectrogramGenerator(object):
         o - output to stdout (-)
         '''
 
-        file_name = "tmp_{}.png".format(random.randint(0, 100000))
-        command = "sox -V0 '{}' -n remix 1 rate 10k spectrogram -y {} -X {} -m -r -o {}".format(file, height, pixel_per_sec, file_name)
-        p = Popen(command, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
+        file_name = "tmp_{}.png".format(str(uuid.uuid4()))
+        p = Popen([
+            'sox',
+            '-V0', file,
+            '-n', 'remix', '1', 'rate', '10k', 'spectrogram',
+            '-y', str(height),
+            '-X', str(pixel_per_sec),
+            '-m', '-r', '-o', file_name
+        ], stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
 
         output, errors = p.communicate()
         if errors:
@@ -129,4 +136,4 @@ if __name__ == "__main__":
 
 
     for a in gen:
-        pass
\ No newline at end of file
+        pass
diff --git a/keras/data_loaders/VinylBackgroundSpectrogramGenerator.py b/keras/data_loaders/VinylBackgroundSpectrogramGenerator.py
index aa45f88..2df962e 100644
--- a/keras/data_loaders/VinylBackgroundSpectrogramGenerator.py
+++ b/keras/data_loaders/VinylBackgroundSpectrogramGenerator.py
@@ -19,7 +19,7 @@ else:
 NOISE_FILES_LENGTH = [118, 14, 20, 46, 126, 8, 124]
 
 def recursive_glob(path, pattern):
-    for root, dirs, files in os.walk(path):
+    for root, dirs, files in os.walk(path, followlinks=True):
         for basename in files:
             if fnmatch.fnmatch(basename, pattern):
                 filename = os.path.abspath(os.path.join(root, basename))
@@ -135,4 +135,4 @@ if __name__ == "__main__":
 
 
     for a in gen:
-        pass
\ No newline at end of file
+        pass
diff --git a/keras/data_loaders/image_loader.py b/keras/data_loaders/image_loader.py
index 10cca4f..87c2182 100644
--- a/keras/data_loaders/image_loader.py
+++ b/keras/data_loaders/image_loader.py
@@ -1,6 +1,6 @@
 import numpy as np
 from scipy.misc import imread
-from csv_loader import CSVLoader
+from .csv_loader import CSVLoader
 
 class ImageLoader(CSVLoader):
 
@@ -14,4 +14,4 @@ class ImageLoader(CSVLoader):
 
         assert len(image.shape) == 3
 
-        return np.divide(image, 255.0)  # Normalize images to 0-1.0
\ No newline at end of file
+        return np.divide(image, 255.0)  # Normalize images to 0-1.0
diff --git a/keras/data_loaders/spectrogram2.py b/keras/data_loaders/spectrogram2.py
index de4e47f..4de7833 100644
--- a/keras/data_loaders/spectrogram2.py
+++ b/keras/data_loaders/spectrogram2.py
@@ -1,6 +1,6 @@
 import numpy as np
 import scipy.io.wavfile as wav
-from csv_loader import CSVLoader
+from .csv_loader import CSVLoader
 from numpy.lib import stride_tricks
 
 class Spectrogram2Loader(CSVLoader):
@@ -88,4 +88,4 @@ class Spectrogram2Loader(CSVLoader):
         # Image shape should be (cols, rows, channels)
         assert len(spectrogram.shape) == 3
 
-        return np.divide(spectrogram, 255.0)  # Normalize images to 0-1.0
\ No newline at end of file
+        return np.divide(spectrogram, 255.0)  # Normalize images to 0-1.0
diff --git a/keras/predict.py b/keras/predict.py
index 08fc419..3a72aca 100644
--- a/keras/predict.py
+++ b/keras/predict.py
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import argparse
 import numpy as np
 import os
@@ -6,11 +7,12 @@ from keras.models import load_model
 
 from data_loaders.SpectrogramGenerator import SpectrogramGenerator
 
-class_labels = ["EN", "DE", "FR", "ES", "CN", "RU"]
+class_labels = ["EN", "CN"]
 
 def predict(cli_args):
 
-    config = {"pixel_per_second": 50, "input_shape": [129, 500, 1], "num_classes": 4}
+    #config = {"pixel_per_second": 50, "input_shape": [129, 500, 1], "num_classes": 4}
+    config = {"pixel_per_second": 50, "input_shape": [129, 500, 1], "num_classes": 2}
     data_generator = SpectrogramGenerator(cli_args.input_file, config, shuffle=False, run_only_once=True).get_generator()
     data = [np.divide(image, 255.0) for image in data_generator]
     data = np.stack(data)
diff --git a/keras/songs.py b/keras/songs.py
index 8f4b4c0..58aed2b 100644
--- a/keras/songs.py
+++ b/keras/songs.py
@@ -43,7 +43,7 @@ def predict(input_file):
     return average_class
 
 def recursive_glob(path, pattern):
-    for root, dirs, files in os.walk(path):
+    for root, dirs, files in os.walk(path, followlinks=True):
         for basename in files:
             if fnmatch.fnmatch(basename, pattern):
                 filename = os.path.abspath(os.path.join(root, basename))
@@ -79,4 +79,4 @@ def eval(root_dir):
 if __name__ == '__main__':
 
     eval("/data/tom/songs/hiphop")
-    eval("/data/tom/songs/pop")
\ No newline at end of file
+    eval("/data/tom/songs/pop")
